#pragma once

#include "PlatformProcessorDefines.h"

// ---- CPU FAMILY --------
// Whether the CPU is x86/x64 (i.e. both 32 and 64-bit variants)
#ifndef AA_PLATFORM_CPU_X86_FAMILY
	#if (defined(_M_IX86) || defined(__i386__) || defined(_M_X64) || defined(__amd64__) || defined(__x86_64__)) && !defined(_M_ARM64EC)
		#define AA_PLATFORM_CPU_X86_FAMILY	1
	#else
		#define AA_PLATFORM_CPU_X86_FAMILY	0
	#endif
#endif

// Whether the CPU is AArch32/AArch64 (i.e. both 32 and 64-bit variants)
#ifndef PLATFORM_CPU_ARM_FAMILY
	#if (defined(__arm__) || defined(_M_ARM) || defined(__aarch64__) || defined(_M_ARM64) || defined(_M_ARM64EC))
		#define PLATFORM_CPU_ARM_FAMILY	1
	#else
		#define PLATFORM_CPU_ARM_FAMILY	0
	#endif
#endif

// ----- COMPILER --------
// MSVC COMPILER
#ifndef PLATFORM_COMPILER_MSVC
	#if defined(_MSC_VER)
		#define PLATFORM_COMPILER_MSVC 1
	#else
		#define PLATFORM_COMPILER_MSVC 0
	#endif
#endif

// CLANG COMPILER - Not supported yet
#ifndef PLATFORM_COMPILER_CLANG
	#if defined(__clang__)
		#error Clang is not supported
		#define PLATFORM_COMPILER_CLANG 0
	#else
		#define PLATFORM_COMPILER_CLANG 0
	#endif
#endif


/******************************
**** SIMD DEFINES ************* 
*******************************/

// Whether we want SIMD Enabled, Off = Will not use SIMD even if present
#ifndef AA_PLATFORM_ENABLE_SIMD_INTRINSICS
	#define AA_PLATFORM_ENABLE_SIMD_INTRINSICS 1
#endif

#ifndef AA_PLATFORM_COMPILER_MAYBE_SUPPORTS_SIMD
	#if defined(AA_PLATFORM_CPU_X86_FAMILY)
		#define AA_PLATFORM_COMPILER_MAYBE_SUPPORTS_SIMD AA_PLATFORM_CPU_X86_FAMILY
	#else
		#define AA_PLATFORM_COMPILER_MAYBE_SUPPORTS_SIMD 0
	#endif
#endif

/*
* Compiler Support for SIMD is not related to the availability of simd.
* They are functions that are fast.
* TO DO:
* Fix #defines
* Add SSE to Vectors and measure
* Improve SSE support for both float and doubles
* 
* 
* TO DO: Generalize Platform and Compiler defines
* 
*/
// SIMD CHECKS FOR IF SIMD VERSIONS ARE PRESENT
#if 1
#define AA_SIMD_SUPPORT						0x10000000
#define AA_X86_NO_SSE_SUPPORT				0x00000001

// SIMD 128-bit Start
// SSE
#if AA_PROCESSOR_SUPPORT_SSE
	#define AA_SSE_SUPPORT					0x00000002
#else
	#define AA_SSE_SUPPORT					0x00000000
#endif
// SSE2
#if AA_PROCESSOR_SUPPORT_SSE2
	#define AA_SSE2_SUPPORT					0x00000004
#else
	#define AA_SSE2_SUPPORT					0x00000000
#endif
// SSE3
#if AA_PROCESSOR_SUPPORT_SSE3
	#define AA_SSE3_SUPPORT					0x00000008
#else
	#define AA_SSE3_SUPPORT					0x00000000
#endif
// SSSE3
#if AA_PROCESSOR_SUPPORT_SSSE3
	#define AA_SSSE3_SUPPORT				0x00000010
#else
	#define AA_SSSE3_SUPPORT				0x00000000
#endif
// SSE41
#if AA_PROCESSOR_SUPPORT_SSE41
	#define AA_SSE41_SUPPORT				0x00000020
#else
	#define AA_SSE41_SUPPORT				0x00000000
#endif
// SSE42
#if AA_PROCESSOR_SUPPORT_SSE42
	#define AA_SSE42_SUPPORT				0x00000040
#else
	#define AA_SSE42_SUPPORT				0x00000000
#endif
// SSE4a
#if AA_PROCESSOR_SUPPORT_SSE4a
	#define AA_SSE4A_SUPPORT				0x00000080
#else
	#define AA_SSE4A_SUPPORT				0x00000000
#endif
// AES (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AES
	#define AA_AES_SUPPORT					0x00000000 //0x00000100
#else
	#define AA_AES_SUPPORT					0x00000000
#endif
// SHA (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_SHA
	#define AA_SHA_SUPPORT					0x00000000 //0x00000200
#else
	#define AA_SHA_SUPPORT					0x00000000
#endif

// SIMD 256-bit Start
// AVX
#if AA_PROCESSOR_SUPPORT_AVX
	#define AA_AVX_SUPPORT					0x00000400
#else
	#define AA_AVX_SUPPORT					0x00000000
#endif
// XOP (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_XOP
	#define AA_XOP_SUPPORT					0x00000000 //0x00000800
#else
	#define AA_XOP_SUPPORT					0x00000000
#endif
// FMA3
#if AA_PROCESSOR_SUPPORT_FMA3
	#define AA_FMA3_SUPPORT					0x00001000
#else
	#define AA_FMA3_SUPPORT					0x00000000
#endif
// FMA4
#if AA_PROCESSOR_SUPPORT_FMA4
	#define AA_FMA4_SUPPORT					0x00002000
#else
	#define AA_FMA4_SUPPORT					0x00000000
#endif
// AVX2
#if AA_PROCESSOR_SUPPORT_AVX2
	#define AA_AVX2_SUPPORT					0x00004000
#else
	#define AA_AVX2_SUPPORT					0x00000000
#endif

// SIMD 512-bit Support (Currently Not Supported. Will fall back to 256/128 which ever is present)
// AVX512F (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AVX512F
	#define AA_AVX512F_SUPPORT				0x00000000 //0x00008000
#else
	#define AA_AVX512F_SUPPORT				0x00000000
#endif
// AVX512CD (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AVX512CD
	#define AA_AVX512CD_SUPPORT				0x00000000 //0x00010000
#else
	#define AA_AVX512CD_SUPPORT				0x00000000
#endif
// AVX512PF (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AVX512PF
	#define AA_AVX512PF_SUPPORT				0x00000000 //0x00020000
#else
	#define AA_AVX512PF_SUPPORT				0x00000000
#endif
// AVX512ER (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AVX512ER
	#define AA_AVX512ER_SUPPORT				0x00000000 //0x00040000
#else
	#define AA_AVX512ER_SUPPORT				0x00000000
#endif
// AVX512VL (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AVX512VL
	#define AA_AVX512VL_SUPPORT				0x00000000 //0x00080000
#else
	#define AA_AVX512VL_SUPPORT				0x00000000
#endif
// AVX512BW (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AVX512BW
	#define AA_AVX512BW_SUPPORT				0x00000000 //0x00100000
#else
	#define AA_AVX512BW_SUPPORT				0x00000000
#endif
// AVX512DQ (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AVX512DQ
	#define AA_AVX512DQ_SUPPORT				0x00000000 //0x00200000
#else
	#define AA_AVX512DQ_SUPPORT				0x00000000
#endif
// AVX512IFMA (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AVX512IFMA
	#define AA_AVX512IFMA_SUPPORT			0x00000000 //0x00400000
#else
	#define AA_AVX512IFMA_SUPPORT			0x00000000
#endif
// AVX512VBMI (NOT SUPPORTED)
#if AA_PROCESSOR_SUPPORT_AVX512VBMI
	#define AA_AVX512VBMI_SUPPORT			0x00000000 //0x00800000
#else
	#define AA_AVX512VBMI_SUPPORT			0x00000000
#endif
#endif
// SIMD Defines
#if 1

#define AA_PLATFORM_SIMD (AA_X86_NO_SSE_SUPPORT | AA_SIMD_SUPPORT | AA_SSE_SUPPORT | AA_SSE2_SUPPORT | AA_SSE3_SUPPORT | AA_SSSE3_SUPPORT | AA_SSE41_SUPPORT | AA_SSE42_SUPPORT | AA_SSE4A_SUPPORT | AA_AVX_SUPPORT | AA_FMA3_SUPPORT | AA_FMA4_SUPPORT | AA_AVX2_SUPPORT)

// 128-bit
#define AA_PLATFORM_HAS_X86			(AA_PLATFORM_SIMD & AA_X86_NO_SSE_SUPPORT)
#define AA_PLATFORM_HAS_SSE			(AA_PLATFORM_SIMD & AA_SSE_SUPPORT)
#define AA_PLATFORM_HAS_SSE2		(AA_PLATFORM_SIMD & AA_SSE2_SUPPORT)
#define AA_PLATFORM_HAS_SSE3		(AA_PLATFORM_SIMD & AA_SSE3_SUPPORT)
#define AA_PLATFORM_HAS_SSSE3		(AA_PLATFORM_SIMD & AA_SSSE3_SUPPORT)
#define AA_PLATFORM_HAS_SSE41		(AA_PLATFORM_SIMD & AA_SSE41_SUPPORT)
#define AA_PLATFORM_HAS_SSE42		(AA_PLATFORM_SIMD & AA_SSE42_SUPPORT)
#define AA_PLATFORM_HAS_SSE4A		(AA_PLATFORM_SIMD & AA_SSE4A_SUPPORT)

// 256-bit
#define AA_PLATFORM_HAS_AVX			(AA_PLATFORM_SIMD & AA_AVX_SUPPORT)
#define AA_PLATFORM_HAS_FMA3		(AA_PLATFORM_SIMD & AA_FMA3_SUPPORT)
#define AA_PLATFORM_HAS_FMA4		(AA_PLATFORM_SIMD & AA_FMA4_SUPPORT)
#define AA_PLATFORM_HAS_AVX2		(AA_PLATFORM_SIMD & AA_AVX2_SUPPORT)

#endif

/*
* __MMX__		x86 MMX
* __SSE__		x86 SSE
* __SSE2__		x86 SSE 2
* __AVX__		x86 AVX
* __VEC__		Alti Vec
* __ARM_NEON__	ARM NEON
* 
*/

#ifndef AA_PLATFORM_USING_SIMD
	#if AA_PLATFORM_ENABLE_SIMD_INTRINSICS
		#if AA_PLATFORM_HAS_SSE2
			#define AA_PLATFORM_USING_SIMD	1
		#else
			#error AA Engine Needs atleast SSE2 Intrinsic support! Please disable Intrinsics!
			#define AA_PLATFORM_USING_SIMD	0
		#endif
	#else
		#define AA_PLATFORM_USING_SIMD 0
	#endif
#endif